// Ios consensus protocol specification in Runway

// *** Type Definitions ***

// Basic interger values
type ServerId : 1..5;
type ServerNum: 0..5;
type ClientId : 1..2;
type NodeId : 1..5;
type RequestId : 0..99;
type View: 1..9;

// Time units
type us: 0..10000000;
type ms: 0..10000;

// Requests & logs
type Request: either {
  Empty {},
  Occupied {
    clientId: ClientId,
    requestId: RequestId,
    // actual request omitted
  },
}

type Entry: record  {
  view: View,
  committed: Boolean,
  request: Request,
}

type Index: 1..5;
type Log: Array<Entry>[Index];

// Server state
type CoordinatorState : record {
  index: Index,
  prepare: ServerNum,
  commit: ServerNum,
}

type RecoveryState : record {
  index: Index,
  candidate: Entry,
  responses: ServerNum
}

type Watcher: record {
  index: Index,
  assignedTo: ServerId,
  timeoutAt: Time,
}

type MasterState : either {
  Unknown {},
  Self {
    coordinators: Set<Watcher>[Index],
    recovery: Set<Watcher>[Index],
    nextHeartbeat: Time,
    viewIndex: Index,
    },
  Preparing {
    recovery: Set<Watcher>[Index],
    viewIndex: Index,
  },
  Other {
    masterId: ServerId,
    timeoutAt: Time,
  }
}

// volatile server state
type ServerMem: record {
  logIndex: Index, //next free index
  commitIndex: Index,
  stateMachine: Array<RequestId>[ClientId],
  master: MasterState,
  coordinator: Vector<CoordinatorState>[Index],
  recovery: Vector<RecoveryState>[Index],
}

// non-volatile server state
type ServerDisk : record {
  view: View,
  log: Log,
};

type Client : record {
  requestId: RequestId,
  masterId: ServerId,
  receivedAt: Time,
  timeoutAt: Time,
  waiting: Boolean
}

type Payload : either {
  ClientResponse {
    requestId: RequestId,
    success: either {
      Successful,
      Unsuccessful {try: ServerId},
    }
  },
  ClientRequest {
    requestId: RequestId,
  },
  PrepareRequest {
    view: View,
    index: Index,
    request: Request,
  },
  PrepareResponse {
    index: Index,
    success: Boolean,
  },
  CommitRequest {
    view: View,
    index: Index,
    request: Request,
  },
  CommitResponse {
    index: Index,
    success: Boolean,
  },
  CoordinateRequest {
    view: View,
    index: Index,
    request: Request,
  },
  CoordinateResponse {
    success: Boolean,
  },
  RecoveryRequest {
    view: View,
    index: Index,
    entry: Entry,
  },
  RecoveryResponse {
    index: Index,
    entry: Entry,
  },
  QueryRequest {
    view: View,
    index: Index,
  },
  QueryResponse {
    index: Index,
    occupied: Boolean,
    entry: Entry,
  },
  NewViewRequest {
    view: View,
  },
  NewViewResponse {
    index: Index
  },
  Heartbeat,
}

type Packet : record {
  sentAt: Time,
  from : NodeId,
  arriveBy: Time,
  to: NodeId,
  payload: Payload,

};

type Status: either {
  Online,
  Offline,
};

// Protocol State
var serverStatus: Array<Status>[ServerId];
var serversDisk: Array<ServerDisk>[ServerId];
var serversMem: Array<ServerMem>[ServerId];
var clients: Array<Client>[ClientId];
var network: Set<Packet>[0..20];

// Configation options
var clientTimeoutMin : us = 100000;
var clientTimeoutMax : us = 200000;
var clientRetry : us = 100000;
var netDelayMin : us = 5000;
var netDelayMax : us = 10000;
var failureTimer : us = 30000;
var heartbeatTimer: us = 10000;

var majority:ServerNum = (size(serversMem)/2) +1;

// Useful functions

function getMasterId(view: View) -> ServerId {
 return view % size(serversMem); // FIX
}

function makeClientTimeout() -> Time {
  return later(urandomRange(clientTimeoutMin, clientTimeoutMax));
}

function sendAll(from: NodeId, p: Payload) {
  for serverId, server in serversMem {
    if serverId != from {
      send(serverId, from, p);
    }
  }
}

function sendAllBut(from: NodeId, but: NodeId, p: Payload) {
  for serverId, server in serversMem {
    if serverId != from && serverId != but{
      send(serverId, from, p);
    }
  }
}

function send(to: NodeId, from: NodeId, p: Payload) {
  push(network, Packet {
    from: from,
    sentAt: later(0),
    to: to,
    arriveBy: later(urandomRange(netDelayMin, netDelayMax)),
    payload: p,
  });
}

function ready(msg: Packet) -> Boolean {
  if past(msg.arriveBy) {
    remove(network,msg);
    return (serverStatus[msg.to]==Online);
  }
  return False;
}

function init() {
  for client in clients {
    client.masterId = 1;
    client.requestId = 1;
  }
  for id, server in serversDisk {
    var masterId : ServerId = getMasterId(server.view);
    if masterId==id {
      serversMem[id].master = Self {};
    } else {
      serversMem[id].master = Other {masterId: masterId, timeoutAt: later(failureTimer)};
    }
  }

}

function stop(id: ServerId) {
  var cleanServer: ServerMem;
  serversMem[id] = cleanServer;
}

function restart(id: ServerId) {
  serversMem[id].master = Other {masterId: getMasterId(serversDisk[id].view), timeoutAt: later(failureTimer)};
  //serversMem[id].logIndex = size(serversDisk[id].log)+1; TODO: FIX
}

function updateView(id: ServerId, view: View) {
  if view > serversDisk[id].view {
    serversDisk[id].view = view;
    var nextMaster: ServerId = getMasterId(view);
    if nextMaster == id {
      // this node is the next master
      serversMem[id].master = Self {};
      sendAll(id, NewViewRequest{view:view});
    } else {
      // wait for the expected new master
      serversMem[id].master = Other{
        masterId:nextMaster,
        timeoutAt: later(failureTimer)};
    }
    var nill: Vector<CoordinatorState>[Index];
    serversMem[id].coordinator = nill;
  }
}

// Initialization
init();


// Internal state Transitions

rule coordinatorFailed {
  for id, server in serversMem {
      match server.master {
        Self(state) {
          for watcher in state.coordinators {
            if past(watcher.timeoutAt) {
              if !serversDisk[id].log[watcher.index].committed {
                send(watcher.assignedTo+1, id,
                  CoordinateRequest {
                    index: watcher.index,
                    request: serversDisk[id].log[watcher.index].request});
                push(state.coordinators,
                  Watcher{
                    index: watcher.index,
                    assignedTo: watcher.assignedTo+1,
                    timeoutAt: later(failureTimer)});
              }
              remove(state.coordinators, watcher);
              serversMem[id].master = Self{coordinators:state.coordinators};
              }
            }
          }
      default {}
      }
    }
}

rule MasterFailed {
  for id, server in serversMem {
      match server.master {
        Other(state) {
            if past(state.timeoutAt) {
              updateView(id, serversDisk[id].view + 1);
            }
        }
        default {}
    }
  }
}

external newRequest for clientId, client in clients {
  if !client.waiting && client.requestId<=3 {
    send(client.masterId, clientId, ClientRequest {requestId: client.requestId});
    client.waiting = True;
    client.receivedAt = later(0);
    client.timeoutAt = later(clientRetry);
  }
}

rule retryRequest for clientId, client in clients {
  if client.waiting && past(client.timeoutAt) {
    client.masterId = client.masterId + 1;
    send(client.masterId, clientId, ClientRequest {requestId: client.requestId});
    client.timeoutAt = later(clientRetry);
    }
}

rule dispatchHeartbeat for id, server in serversMem {
  match server.master {
    Self(state) {
      if past(state.nextHeartbeat) {
        sendAll(id,Heartbeat);
        serversMem[id].master = Self{nextHeartbeat:later(heartbeatTimer)};
      }
    }
    default {}
  }
}

rule handleHeartbeat for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      Heartbeat {
        match serversMem[msg.to].master {
          Other(state) {
            if state.masterId==msg.from {
              serversMem[msg.to].master = Other{
                masterId: state.masterId,
                timeoutAt:later(failureTimer)};
            }
          }
          default {}
          }
        remove(network,msg);
      }
    default {}
    }
  }
}

// if master when write and forward request at given index to a coordinator
function forward(id: ServerId, index: Index, request: Request) {
  match serversMem[id].master {
    Self(masterState) {
      serversDisk[id].log[index] =
        Entry{view: serversDisk[id].view, committed:False, request:request};
      // forward to coordinator
      send(
        id+1,
        id,
        CoordinateRequest {index: index, request: request});
      // timeout to detect failed coordinator
      push(masterState.coordinators,
        Watcher{
          index: index,
          assignedTo: id+1,
          timeoutAt: later(failureTimer),
        });
      serversMem[id].master = Self{coordinators:masterState.coordinators};
    }
    default {}
  }
}

rule handleClientRequest for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      ClientRequest(data) {
        match serversMem[msg.to].master {
          Self(masterState) {
              // replicate locally
              var request: Request = Occupied{clientId:msg.from, requestId:data.requestId};
              var index: Index = serversMem[msg.to].logIndex;
              serversMem[msg.to].logIndex += 1;
              // forward
              forward(msg.to,index,request);
          }
          Other(masterData) {
            send(
              msg.from,
              msg.to,
              ClientResponse {requestId: data.requestId, success:Unsuccessful {try:masterData.masterId}});
          }
          default {}
        }
      remove(network,msg);
    }
  default {}
  }
}
}

rule handleClientResponse for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      ClientResponse(data) {
        if clients[msg.to].waiting &&
            data.requestId==clients[msg.to].requestId {
              match data.success {
                Successful {
                  clients[msg.to].requestId = clients[msg.to].requestId + 1;
                  clients[msg.to].waiting = False;
                }
                Unsuccessful(hint) {
                  clients[msg.to].masterId = hint.try;
                  send(clients[msg.to].masterId, msg.to, ClientRequest {requestId: data.requestId});
                  clients[msg.to].timeoutAt = later(clientRetry);
                }
              }
            }
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handlePrepareRequest for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      PrepareRequest(data) {
        updateView(msg.to,data.view);
        serversDisk[msg.to].log[serversMem[msg.to].logIndex] = Entry{request:data.request,committed:False};
        serversMem[msg.to].logIndex += 1;
        send(
          msg.from,
          msg.to,
          PrepareResponse {index: data.index, success:True});
      remove(network,msg);
        }
    default {}
    }
  }
}

rule handlePrepareResponse for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      PrepareResponse(data) {
        for coordState in serversMem[msg.to].coordinator {
          if data.index == coordState.index {
            coordState.prepare += 1;
            if coordState.prepare==majority {
              var request:Request = serversDisk[msg.to].log[data.index].request;
              var entry:Entry = Entry {view: serversDisk[msg.to].view, committed:True, request:request};
              serversDisk[msg.to].log[data.index] = entry;
              // check for outstanding entries
              var index:Index = serversMem[msg.to].commitIndex;
              while index < serversMem[msg.to].logIndex {
                if serversDisk[msg.to].log[index].committed {
                  match serversDisk[msg.to].log[index].request {
                    Occupied(req) {
                      serversMem[msg.to].stateMachine[req.clientId] = req.requestId;
                      send(
                        req.clientId,
                        msg.to,
                        ClientResponse {requestId: req.requestId, success: Successful});
                    }
                    Empty {}
                  }
                  serversMem[msg.to].commitIndex = index;
                  index += 1;
                }
                else {break;}
              }
              coordState.commit += 1;
              sendAll(
                msg.to,
                CommitRequest{index:data.index,request:request});
            }
          }
        }
      remove(network,msg);
    }
    default {}
    }
  }
}

rule handleCommitRequest for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      CommitRequest(data) {
        updateView(msg.to,data.view);
        serversDisk[msg.to].log[data.index] =
          Entry {view: serversDisk[msg.to].view,committed:True, request:data.request};
        var index:Index = serversMem[msg.to].commitIndex;
        while index < serversMem[msg.to].logIndex {
          if serversDisk[msg.to].log[index].committed {
            match serversDisk[msg.to].log[index].request {
              Occupied(req) {
                serversMem[msg.to].stateMachine[req.clientId] = req.requestId;
              }
              Empty {}
            }
            serversMem[msg.to].commitIndex = index;
            index += 1;
          }
          else {break;}
        }
        send(
          msg.from,
          msg.to,
          CommitResponse {index: data.index, success:(serversMem[msg.to].commitIndex>=data.index) });
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handleCommitResponse for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      CommitResponse(data) {
        for coordState in serversMem[msg.to].coordinator {
          if data.index == coordState.index {
            coordState.commit += 1;
            if coordState.commit == size(serversMem) {
              remove(serversMem[msg.to].coordinator,coordState);
            }
          }
        }
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handleCoordinateRequest for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      CoordinateRequest(data) {
        updateView(msg.to,data.view);
        // replicate locally
        serversDisk[msg.to].log[data.index] =
          Entry{view: serversDisk[msg.to].view, committed:False, request:data.request};
        serversMem[msg.to].logIndex = data.index+1;
        // start prepare phase
        push(serversMem[msg.to].coordinator,
           CoordinatorState{index:data.index, prepare: 2, commit:0});
        sendAllBut(
          msg.to,
          msg.from,
          PrepareRequest {view: serversDisk[msg.to].view,index: data.index, request: data.request});
        // reply to master
        send(
          msg.from,
          msg.to,
          CoordinateResponse {success:True});
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handleCoordinateResponse for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      CoordinateResponse {
        // do nothing
        remove(network,msg);
      }
    default {}
    }
  }
}

function newest(a: Entry,b: Entry) -> Entry {
  var emptyReq: Request = Empty{};
  if a.request==emptyReq {
    return b;
  }
  if b.request==emptyReq {
    return a;
  }
  if a.view > b.view {
    return a;
  }
  return b;
}

rule handleRecoveryRequest for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      RecoveryRequest(data) {
        push(serversMem[msg.to].recovery,RecoveryState{
          index: data.index,
          candidate: newest(data.entry,serversDisk[msg.to].log[data.index]),
          responses: 2,
        });
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handleRecoveryResponse for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      RecoveryResponse(data) {
        for recoveryState in serversMem[msg.to].recovery {
          if data.index == recoveryState.index {
              remove(serversMem[msg.to].recovery,recoveryState);
              forward(msg.to,data.index,data.entry.request);
          }
        }
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handleQueryRequest for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      QueryRequest(data) {
        send(msg.from, msg.to, QueryResponse{
            index:data.index,
            entry:serversDisk[msg.to].log[data.index]});
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handleQueryResponse for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      QueryResponse(data) {
        for watcher in serversMem[msg.to].recovery {
          if watcher.index == data.index {
            watcher.candidate = newest(data.entry,watcher.candidate);
            watcher.responses +=1;
            if watcher.responses == majority {
              send(1,msg.to,
                RecoveryResponse{
                  index:data.index,
                  entry:watcher.candidate,
                  });
              remove(serversMem[msg.to].recovery,watcher);
            }
          }
        }
        remove(network,msg);
      }
    default {}
    }
  }
}

rule handleNewViewRequest for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Online {
    match msg.payload {
      NewViewRequest(data) {
        updateView(msg.to,data.view);
        send(msg.from,msg.to,NewViewResponse{index:serversMem[msg.to].logIndex});
        remove(network,msg);
      }
    default {}
    }
  }
}

// TODO: test if we can remove online from all rules by making this rule first
rule disgardMsgs for msg in network {
  if past(msg.arriveBy) && serverStatus[msg.to]==Offline {
    remove(network,msg);
  }
}

// External state Transitions

external nodeFailure for id, status in serverStatus {
  status = Offline;
  stop(id);
}

external nodeRecovery for id, status in serverStatus {
  status = Online;
  restart(id);
}
