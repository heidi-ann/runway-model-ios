// Type Definitions

type ServerId : 1..3;
type ServerNum: 0..3;
type ClientId : 1..3;
type RequestId : 0..99;
type View: 1..9;

type us: 0..10000000;
type ms: 0..10000;

type NodeId : 1..3;

type Request: record {
  clientId: ClientId,
  requestId: RequestId,
  // actual request omitted
}

type Entry: record  {
  view: View,
  committed: Boolean,
  request: Request,
}
type Index: 1..10;
type Log: Vector<Entry>[Index];

type CoordinatorState : record {
  request: Request,
  prepare: ServerNum,
  commit: ServerNum,
}

type MasterState : either {
  Self {
    coord: Set<CoordinatorState>[Index]
  },
  Other {
    masterId: ServerId,
    timeoutAt: Time,
  }
}

type Server : record {
  view: View,
  stateMachine: Array<RequestId>[ClientId],
  log: Log,
  logIndex: Index,
  commitIndex: Index,
  master: MasterState,
};

type Client : record {
  requestId: RequestId,
  masterId: ServerId,
  timeoutAt: Time,
  waiting: Boolean
}

type Payload : either {
  ClientResponse {
    requestId: RequestId,
    success: either {
      Successful,
      Unsuccessful {try: ServerId},
    }
  },
  ClientRequest {
    requestId: RequestId,
  },
  PrepareRequest {
    index: Index,
    request: Request,
  },
  PrepareResponse {
    index: Index,
    success: Boolean,
  },
  CommitRequest {
    index: Index,
    request: Request,
  },
  CommitResponse {
    index: Index,
    success: Boolean
  },
}

type Packet : record {
  sentAt: Time,
  sentBy : NodeId,
  arriveBy: Time,
  arriveAt: NodeId,
  payload: Payload,

};

// Protocol State

var servers: Array<Server>[ServerId];
var clients: Array<Client>[ClientId];
var network: Set<Packet>[0..20];

var clientTimeoutMin : us = 100000;
var clientTimeoutMax : us = 200000;
var clientRetry : us = 100000;
var netDelayMin : us = 5000;
var netDelayMax : us = 10000;
var FailureTimer : us = 30000;

var majority:ServerNum = (size(servers)/2) +1;

// Useful functions

function getMasterId(view: View) -> ServerId {
 return view % size(servers); // FIX
}

function makeClientTimeout() -> Time {
  return later(urandomRange(clientTimeoutMin, clientTimeoutMax));
}

function sendAll(from: NodeId, p: Payload) {
  for serverId, server in servers {
    if serverId != from {
      send(serverId, from, p);
    }
  }
}

function send(to: NodeId, from: NodeId, p: Payload) {
  push(network, Packet {
    sentBy: from,
    sentAt: later(0),
    arriveAt: to,
    arriveBy: later(urandomRange(netDelayMin, netDelayMax)),
    payload: p,
  });
}

function init() {
  for client in clients {
    client.timeoutAt = makeClientTimeout();
    client.masterId = 1;
    client.requestId = 1;
  }
  for serverId, server in servers {
    var masterId : ServerId = getMasterId(server.view);
    if masterId==serverId {
      server.master = Self {};
    } else {
      server.master = Other {masterId: masterId, timeoutAt: later(FailureTimer)};
    }
  }

}

// Initialization
init();


// State Transitions
rule newRequest for clientId, client in clients {
  if past(client.timeoutAt) {
    if client.waiting {
      client.masterId = client.masterId + 1;
    } else {
      client.waiting = True;
    }
    send(client.masterId, clientId, ClientRequest {requestId: client.requestId});
    client.timeoutAt = later(clientRetry);
    }
}

rule handleMessage for msg in network {
  if past(msg.arriveBy) {
    remove(network,msg);
    match msg.payload {
      ClientRequest(data) {
        match servers[msg.arriveAt].master {
          Self(state) {
            if state.prepare==0 {
              var request: Request = Request {clientId:msg.sentBy, requestId:data.requestId};
              push(servers[msg.arriveAt].log,
                Entry{view: servers[msg.arriveAt].view, committed:False, request:request});
              //state.prepare = 1;
              servers[msg.arriveAt].master = Self{prepare:1};
              sendAll(
                msg.arriveAt,
                PrepareRequest {index: servers[msg.arriveAt].logIndex, request: request});
            } else {
              push(network,msg);
            }
          }
          Other(masterData) {
            send(
              msg.sentBy,
              msg.arriveAt,
              ClientResponse {requestId: data.requestId, success:Unsuccessful {try:masterData.masterId}});
          }
        }

      }
      ClientResponse(data) {
        if clients[msg.arriveAt].waiting &&
            data.requestId==clients[msg.arriveAt].requestId {
              match data.success {
                Successful {
                  clients[msg.arriveAt].requestId = clients[msg.arriveAt].requestId + 1;
                  clients[msg.arriveAt].waiting = False;
                  clients[msg.arriveAt].timeoutAt = makeClientTimeout();
                }
                Unsuccessful(hint) {
                  clients[msg.arriveAt].masterId = hint.try;
                  send(clients[msg.arriveAt].masterId, msg.arriveAt, ClientRequest {requestId: data.requestId});
                  clients[msg.arriveAt].timeoutAt = later(clientRetry);
                }
              }

            }

      }
      PrepareRequest(data) {
        push(servers[msg.arriveAt].log, Entry{request:data.request,committed:False});
        servers[msg.arriveAt].logIndex += 1;
        send(
          msg.sentBy,
          msg.arriveAt,
          PrepareResponse {index: data.index, success:True});
      }
      PrepareResponse(data) {
        match servers[msg.arriveAt].master {
          Self(state) {
            if data.index==servers[msg.arriveAt].logIndex {
              state.prepare += 1;
              if state.prepare>=majority {
                servers[msg.arriveAt].commitIndex = data.index;
                //state.prepare = 0;
                servers[msg.arriveAt].master = Self{prepare:0};
                var entry: Entry = servers[msg.arriveAt].log[data.index];
                servers[msg.arriveAt].stateMachine[entry.request.clientId] = entry.request.requestId;
                send(
                  msg.sentBy,
                  entry.request.clientId,
                  ClientResponse {requestId: entry.request.requestId, success: Successful});
                servers[msg.arriveAt].log[data.index] = Entry {view: servers[msg.arriveAt].view, committed:True, request:entry.request};
                sendAll(
                  msg.arriveAt,
                  CommitRequest{index:data.index,request:entry.request});
                servers[msg.arriveAt].logIndex += 1;
              }
            }
          }
          Other(masterData) {} // ignore
        }
      }
    CommitRequest(data) {
      servers[msg.arriveAt].commitIndex = data.index;
      servers[msg.arriveAt].stateMachine[data.request.clientId] = data.request.requestId;
      servers[msg.arriveAt].log[data.index] = Entry {view: servers[msg.arriveAt].view,committed:True, request:data.request};
    }
    CommitResponse {}
    }
  }
}
